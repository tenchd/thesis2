void *MeshLocal::malloc(size_t sz) {
  int szClass;
  // forward to global heap if large
  if (!getSizeClass(sz, &szClass))
    return _global->malloc(sz);
  auto shufVec = _shufVecs[szClass];
  if (shufVec.isExhausted()) {
    shufVec.detachMiniheap();
    shufVec.attach(
      _global->allocMiniheap(szClass));}
  return shufVec.malloc();
}

void ShuffleVector::attach(MiniHeap *mh){
  _mh = mh;
  _off = maxCount();
  for (auto i = 0; i < maxCount(); i++){
    // true if atomically set (0 -> 1)
    if (bitmap.tryToSet(i)) {
      _list[_off--] = i;
    } }
  shuffle(_list[_off],
          _list[maxCount()]);
}

void *ShuffleVector::malloc() {
  const auto off = _list[_off++];
  return _spanStart + off * _objSize;
}

void MeshLocal::free(void *ptr) {
  // check if in attached MiniHeap
  for (auto i=0; i<SizeClassCount; i++){
    const auto curr = _shufVecs[i];
    if (curr->contains(ptr)) {
      curr->free(ptr);
      return; } }
  _global->free(ptr); // general case
}

void ShuffleVector::free(void *ptr) {
  const auto freedOff = getOff(ptr);
  _list[--_off] = freedOff;
  // place newly freed address
  // randomly in the shuffle vector
  auto swapOff =
    _rng.inRange(_off, maxCount() - 1);
  swap(_list[_off], _list[swapOff]);
}
